clc;
clear all;
close all;

% % % %  To get the input Image file
[file,path] = uigetfile('*.jpg;*.jpeg;*.tif;*.bmp','Pick an Image File');
if isequal(file,0) || isequal(path,0)
    warndlg('User Pressed Cancel');
else
input = imread(file);
input = imresize(input,[256 256]);
[r c p]=size(input);
if p==3
    input = rgb2gray(input);
end    
figure;
imshow(input);
title('Input Image');

%%%%%% Apply Discrete wavelet transform to input image

[ll lh hl hh] = integerdwt(input);

WD = [ll lh;hl hh];

figure;
imshow(WD,[]);
title('Image Decomposition');

%%%%%% Brightness Level Analysis
% f = log(ll) + 0.1;
[r c] = size(ll);
sigma = 0;
 for i = 1:r
     for j=1:c
         d1(i,j) = log(ll(i,j)); 
          if d1(i,j) ==-inf
              d1(i,j) = sigma;
          end
     end
 end
 
%%%%%%% Set lower and upper bound for sublayer decomposition 
 lb = 0.4;
 hb = 0.7;
 
 d1 = imresize(d1,[r r]);
%  d2 = d1(:);
%%%%%%% Normalization
min1=min(min(d1));
max1=max(max(d1));
y1=((d1-min1).*1)./(max1-min1);
 
 [r c] = size(y1);
 %%%%%%%%%%%%low intensity 
 NI = y1;
 for i =1:r
     for j=1:c
         if NI(i,j) <=0.4
         l(i,j) = NI(i,j);
         else
             l(i,j) = 0;
         end
     end
 end
  
 figure;
 subplot(1,3,1);
 imshow(l,[]);
 title('Low Intensity Layer');
 
 %%%%%%%%%%%%middle intensity 
 
 for i =1:r
     for j=1:c
         if NI(i,j) >0.4 & NI(i,j) <=0.7
         ml(i,j) = NI(i,j);
         else
             ml(i,j) = 0;
         end
     end
 end
 
 subplot(1,3,2);
 imshow(ml,[]);
 title('Middle Intensity Layer');
 
 %%%%%%%%%%%%high intensity 
 
 for i =1:r
     for j=1:c
         if NI(i,j) >=0.7
         h(i,j) = NI(i,j);
         else
             h(i,j) = 0;
         end
     end
 end
 
 subplot(1,3,3);imshow(h,[]);
 title('High Intensity Layer');

%%%%%% Knee transfer Function
 %%%%%% Set the tuning parameter for knee points determination
  bl = 0.4;
  bh = 0.7;
  wl = 1;wh =1;wm = 3;
  
  lowl = l;middlel = ml;highl = h;
  
  
 pl =  bl + wl *(bl - mean(mean(l)));
 
 
 ph =  bh + wh*(bh- mean(mean(h)));
 

 pml =abs( bl - 3 * (0.5 - mean(mean(ml))) + (pl - ph));
 
 pmh = bh + 3 * (0.5 - mean(mean(ml))) + (pl - ph);
 
 
 %%%%%% Gamma Adjustment Function for three intensity layers
 
 gamma = 1 / 1.4 ;
 
 
 gamma_low  = abs ((l ./ bl).^gamma   - (1 - (l./bl).^gamma) + 1);

 gamma_ml  = abs ((ml ./ (bh-bl)).^gamma   - (1 - (ml./(bh-bl)).^gamma) + 1);
 
 gamma_high = abs ((h ./ (1-bh)).^gamma   - (1 - (h./(1-bh)).^gamma) + 1);
 
%%%%%% Combining Knee transfer and gamma adjustment function
%%%%%% Enhancement of three intensity layers
 
low1 = pl .* gamma_low;


middle1 = pl.*gamma_ml;


high1 = pl.*gamma_high;


%%%%% Fusion of Enhanced Intensity layers

for i=1:r
    for j=1:c
        
        f21(i,j) = fuse(lowl(i,j),middlel(i,j),highl(i,j));
    end
end
   
%%%%%% Combining the Enhanced Low frequency with high frequency subbands
 lh = lh / 255;
 hl = hl / 255;
 hh = hh / 255;

g = reversedwt(f21,lh, hl,hh);
 
 %%%%% Smoothening the image by removing distorted borders
 
 myfilter = fspecial('gaussian',[3 3], 0.5);
 
 myfilteredimage = imfilter(g, myfilter, 'replicate');
 
 figure;
 imshow(myfilteredimage,[]);
 title('Enhanced Image');
 
%%%%% Performance parameters

out = uint8(myfilteredimage);
[M N P] = size(out);
X = uint8(input);
denom=M*N*16;
MSE = sum(sum((X-out).^2))/denom;
PSNR = 10*log10(255*255/MSE);
disp('Performance Parameters :');
disp('Mean Square Error = ');
disp(MSE);
disp('Peak Signal to Noise Ratio = ');
disp(PSNR);

end
